swagger: '2.0'
info:
  version: 0.7.5
  title: dgx-patron-creator-service
host: 'localhost:3001'
basePath: /api
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
paths:
  /v0.1/patrons:
    x-swagger-router-controller: patrons
    post:
      tags:
        - patrons
      summary: Create a Patron - Deprecated
      description: Deprecated endpoint. Please see https://github.com/NYPL/dgx-patron-creator-service/wiki for more information. The request parameter in this example will be kept but the response will always return a 400 deprecated note.
      operationId: patrons_creatorV01
      parameters:
        - name: patron_data
          in: body
          description: The information of the new patron
          required: true
          schema:
            $ref: '#/definitions/PatronsCreatorDataV01'
      responses:
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/400ErrorResponseDeprecated'
      security:
        - api_auth:
            - 'openid write:patron offline_access api'
  /v0.2/patrons:
    x-swagger-router-controller: patrons
    post:
      tags:
        - patrons
      summary: Create a Patron - Deprecated
      description: Deprecated endpoint. Please see https://github.com/NYPL/dgx-patron-creator-service/wiki for more information. The request parameter in this example will be kept but the response will always return a 400 deprecated note.
      operationId: patrons_creatorV02
      parameters:
        - name: patron_data
          in: body
          description: The information of the new patron
          required: true
          schema:
            $ref: '#/definitions/PatronsCreatorDataV02'
      responses:
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/400ErrorResponseDeprecated'
      security:
        - api_auth:
            - 'openid write:patron offline_access api'
  /v0.3/patrons:
    x-swagger-router-controller: patrons
    post:
      tags:
        - patrons
      summary: Create a Patron
      description: Create a new patron account via the ILS.
      operationId: patrons_creatorV03
      parameters:
        - name: patron
          in: body
          description: The information of the new patron
          required: true
          schema:
            $ref: '#/definitions/PatronsCreatorDataV03'
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/PatronsCreatorResponseV03'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/400ErrorResponseV03'
        '502':
          description: Generic server error
          schema:
            $ref: '#/definitions/500ErrorResponseCreatePatronV03'
      security:
        - api_auth:
            - 'openid write:patron offline_access api'
  /v0.3/patrons/dependents:
    x-swagger-router-controller: patrons
    post:
      tags:
        - patrons
      summary: Create a dependent juvenile account
      description: Create a dependent juvenile account based on a parent's patron account.
      operationId: patrons_dependentsV03
      parameters:
        - name: barcode_and_input
          in: body
          description: The barcode or username of the existing parent patron and the dependent's account information.
          required: true
          schema:
            $ref: '#/definitions/PatronsDependentsDataV03'
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/PatronsDependentsResponseV03'
        '400':
          description: Invalid request
          schema:
            $ref: '#/definitions/400DependentsErrorResponseV03'
        '502':
          description: ILS Integration Error
          schema:
            $ref: '#/definitions/502ILSIntegrationErrorV03'
      security:
        - api_auth:
            - 'openid write:patron offline_access api'
  /v0.3/patrons/dependent-eligibility:
    x-swagger-router-controller: patrons
    get:
      tags:
        - patrons
      summary: Check Patron's account creation eligibility
      description: Check if a patron is eligible to create dependent juvenile accounts. Pass in either the barcode or username of the existing patron account to check for eligibility.
      operationId: patrons_eligibilityV03
      parameters:
        - name: barcode
          in: query
          description: The 14-digit barcode of the existing patron
          type: string
        - name: username
          in: query
          description: The username of the existing patron
          type: string
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/PatronsEligibilityResponseV03'
        '400':
          description: Invalid request
          schema:
            $ref: '#/definitions/400BarcodeErrorResponseV03'
        '502':
          description: ILS Integration Error
          schema:
            $ref: '#/definitions/502PatronNotFoundErrorV03'
      security:
        - api_auth:
            - 'openid write:patron offline_access api'
  /v0.1/validations/username:
    x-swagger-router-controller: validations/username
    post:
      tags:
        - validations
      summary: Patron username validation - Deprecated
      description: Deprecated endpoint. Please see https://github.com/NYPL/dgx-patron-creator-service/wiki for more information. The request parameter in this example will be kept but the response will always return a 400 deprecated note.
      operationId: username
      parameters:
        - name: username
          in: body
          description: The username to be validated
          required: true
          schema:
            $ref: '#/definitions/UsernameData'
      responses:
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/400ErrorResponseDeprecated'
      security:
        - api_auth:
            - 'openid write:patron offline_access api'
  /v0.1/validations/address:
    x-swagger-router-controller: validations/address
    post:
      tags:
        - validations
      summary: Patron address validation - Deprecated
      description: Deprecated endpoint. Please see https://github.com/NYPL/dgx-patron-creator-service/wiki for more information. The request parameter in this example will be kept but the response will always return a 400 deprecated note.
      operationId: address
      parameters:
        - name: address_data
          in: body
          description: The address to be validated
          required: true
          schema:
            $ref: '#/definitions/AddressDataV1'
      responses:
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/400ErrorResponseDeprecated'
      security:
        - api_auth:
            - 'openid write:patron offline_access api'
  /v0.3/validations/username:
    x-swagger-router-controller: validations/username
    post:
      tags:
        - validations
      summary: Patron username validation and availability in the ILS
      description: This endpoint does simple username validation and then makes a call to the ILS API for patron username availability.
      operationId: usernameV0.3
      parameters:
        - name: username
          in: body
          description: The username to be validated and checked for availability
          required: true
          schema:
            $ref: '#/definitions/UsernameData'
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/UsernameResponseV03'
        '400':
          description: Invalid request
          schema:
            $ref: '#/definitions/400ErrorResponseUsernameV03'
        '502':
          description: ILS Integration Error
          schema:
            $ref: '#/definitions/502ILSIntegrationUsernameErrorV03'
      security:
        - api_auth:
            - 'openid write:patron offline_access api'
  /v0.3/validations/address:
    x-swagger-router-controller: validations/address
    post:
      tags:
        - validations
      summary: Address validation against Service Objects.
      description: 'Makes a call to the Service Objects API for patron address and work address validation. Note that 502 server errors from Service Objects will result in a 400 from the endpoint. If there''s a server error, the address is still naively checked and a temporary card is returned. The patron is expected to contact the library.'
      operationId: addressV03
      parameters:
        - name: address
          in: body
          description: The address to be validated
          required: true
          schema:
            $ref: '#/definitions/AddressDataV03'
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/AddressResponseV03'
        '400':
          description: Invalid request
          schema:
            $ref: '#/definitions/400ErrorResponseAddressV03'
        '404':
          description: This is another example of a 400 error but Swagger can't display multiple 400 errors.
          schema:
            $ref: '#/definitions/400ErrorResponseAddressAlternateV03'
      security:
        - api_auth:
            - 'openid write:patron offline_access api'
definitions:
  PatronsCreatorDataV01:
    required:
      - simplePatron
    properties:
      simplePatron:
        $ref: '#/definitions/SimplePatronV01'
  SimplePatronV01:
    required:
      - name
      - dateOfBirth
      - address
      - username
      - pin
    properties:
      name:
        type: string
        example: 'Mikey Olson, Jr.'
      dateOfBirth:
        type: string
        example: 11/11/1987
      email:
        type: string
        example: mjolson@example.com
      address:
        $ref: '#/definitions/AddressModelV1'
      username:
        type: string
        example: mjolson54321
      pin:
        type: string
        example: '1234'
      ecommunications_pref:
        type: boolean
        example: true
      policy_type:
        type: string
        example: web_applicant
      patron_agency:
        type: string
        example: '198'
  AddressDataV1:
    description: The data format of the input address
    required:
      - address
    properties:
      address:
        $ref: '#/definitions/AddressModelV1'
      is_work_or_school_address:
        type: boolean
        default: false
        example: true
  AddressModelV1:
    type: object
    required:
      - line_1
      - city
      - state
      - zip
    properties:
      line_1:
        type: string
        example: 123 Fake Street
      line_2:
        type: string
        example: ''
      city:
        type: string
        example: New York
      state:
        type: string
        example: NY
      zip:
        type: string
        example: '10018'
  PatronsCreatorDataV02:
    required:
      - names
      - patronType
    properties:
      names:
        type: array
        items:
          type: string
        example:
          - 'TestLastName, TestFirstName'
      barcodes:
        type: array
        items:
          type: string
        example:
          - barcode_2018_07_19_328pm
      pin:
        type: string
        example: '1234'
      expirationDate:
        type: string
        example: '2019-01-01'
      birthDate:
        type: string
        example: '1978-01-01'
      emails:
        type: array
        items:
          type: string
        example:
          - test_email_2018_07_19_238_a@test.com
          - test_email_2018_07_19_238_b@test.com
      patronType:
        type: number
        example: 151
      patronCodes:
        type: object
        required:
          - pcode1
          - pcode2
          - pcode3
          - pcode4
        properties:
          pcode1:
            type: string
            example: s
          pcode2:
            type: string
            example: f
          pcode3:
            type: number
            example: 5
          pcode4:
            type: number
            example: 100
      blockInfo:
        type: object
        required:
          - code
        properties:
          code:
            type: string
            example: '-'
      addresses:
        type: array
        items:
          type: object
          required:
            - lines
            - type
          properties:
            lines:
              type: array
              items:
                type: string
              example:
                - ADDRESS LINE 1
                - ADDRESS LINE 2
            type:
              type: string
              example: a
      phones:
        type: array
        items:
          type: object
          required:
            - number
            - type
          properties:
            number:
              type: string
              example: 917-123-4567
            type:
              type: string
              example: t
  PatronsCreatorDataV03:
    required:
      - names
      - username
      - pin
      - address
    properties:
      name:
        type: string
        example: FirstName LastName
      username:
        type: string
        example: username
      usernameHasBeenValidated:
        type: boolean
        example: true
      pin:
        type: string
        example: '1234'
      address:
        $ref: '#/definitions/AddressModelV03'
      ageGate:
        type: boolean
        example: true
      birthdate:
        type: string
        example: 01-01-1988
      email:
        type: string
        example: test@email.com
      policyType:
        type: string
        example: simplye
      workAddress:
        $ref: '#/definitions/AddressModelV03'
      ecommunicationsPref:
        type: boolean
        example: false
      homeLibraryCode:
        type: string
        example: eb
      acceptTerms:
        type: boolean
        example: true
  PatronsCreatorResponseV03:
    type: object
    properties:
      status:
        type: number
        example: 200
      link:
        type: string
        example: 'https://link.com/to/ils/1234567'
      type:
        type: string
        example: card-granted
      barcode:
        type: string
        example: '111122222222345'
      username:
        type: string
        example: username
      pin:
        type: string
        example: '1111'
      temporary:
        type: boolean
        example: false
      message:
        type: string
        example: The library card will be a standard library card.
      patronId:
        type: number
        example: '1234567'
  PatronsDependentsDataV03:
    required:
      - barcode
      - name
      - username
      - pin
    properties:
      barcode:
        type: string
        example: '12345678912345'
      parentUsername:
        type: string
        example: parentUsername1
      name:
        type: string
        example: 'DependentFirstName DependentLastName'
      username:
        type: string
        example: dependentUsername1
      pin:
        type: string
        example: '1234'
  PatronsDependentsResponseV03:
    type: object
    properties:
      status:
        type: number
        example: 200
      data:
        properties:
          dependent:
            type: object
            properties:
              id:
                type: number
                example: 12345
              username:
                type: string
                example: username12
              name:
                type: string
                example: 'DependentFirstName DependentLastName'
              barcode:
                type: string
                example: '28888888888888'
              pin:
                type: string
                example: '1234'
          parent:
            type: object
            properties:
              updated:
                type: boolean
                example: true
              barcode:
                type: string
                example: '12345678912345'
              dependents:
                type: string
                example: 'DEPENDENTS 28888888888887,28888888888888'
  PatronsEligibilityResponseV03:
    type: object
    properties:
      status:
        type: number
        example: 200
      eligible:
        type: boolean
      decription:
        type: string
        example: This patron can create dependent accounts.
  UsernameData:
    required:
      - username
    properties:
      username:
        type: string
        example: mikeolson
  UsernameResponseV03:
    type: object
    properties:
      type:
        type: string
        example: available-username
      message:
        type: string
        example: This username is available.
  AddressDataV03:
    description: The data format of the input address
    required:
      - address
    properties:
      address:
        $ref: '#/definitions/AddressModelV03'
  AddressModelV03:
    type: object
    properties:
      line1:
        type: string
        example: 123 Fake Street
      line2:
        type: string
        example: ''
      city:
        type: string
        example: New York
      state:
        type: string
        example: NY
      zip:
        type: string
        example: '10018'
      isResidential:
        type: boolean
        example: true
      hasBeenValidated:
        type: boolean
        example: false
  AddressResponseV03:
    type: object
    properties:
      status:
        type: number
        example: 200
      type:
        type: string
        example: "valid-address"
      title:
        type: string
        example: "Valid address"
      address:
        $ref: '#/definitions/AddressModelValidatedV03'
      original_address:
        $ref: '#/definitions/AddressModelV03'
  AddressModelValidatedV03:
    type: object
    properties:
      line1:
        type: string
        example: 123 Fake Street
      line2:
        type: string
        example: ''
      city:
        type: string
        example: New York
      county:
        type: string
        example: ''
      state:
        type: string
        example: NY
      zip:
        type: string
        example: 10018-1234
      isResidential:
        type: boolean
        example: true
      hasBeenValidated:
        type: boolean
        example: true
  400ErrorResponseDeprecated:
    properties:
      status:
        type: number
        example: 400
      type:
        type: string
        example: "deprecated-note"
      title:
        type: string
        example: "Deprecated Note"
      deatil:
        type: string
        example: "This endpoint is deprecated. Use the v0.3 endpoints and find more information on https://github.com/NYPL/dgx-patron-creator-service/wiki"
  400ErrorResponseV03:
    properties:
      status:
        type: number
        example: 400
      type:
        type: string
        example: invalid-request
      title:
        type: string
        example: "Invalid Request"
      message:
        type: string
        example: There was an error with the request.
      detail:
        type: string
        example: There was an error with the request.
      error:
        type: object
        example: {}
  400DependentsErrorResponseV03:
    properties:
      status:
        type: number
        example: 400
      type:
        type: string
        example: unavailable-username
      title:
        type: string
        example: "Unavailable Username"
      message:
        type: string
        example: This username is unavailable. Please try another.
      detail:
        type: string
        example: This username is unavailable. Please try another.
  400ErrorResponseUsernameV03:
    properties:
      status:
        type: number
        example: 400
      type:
        type: string
        example: "invalid-username"
      title:
        type: string
        example: "Bad Username"
      detail:
        type: object
        example: 'Usernames should be 5-25 characters, letters or numbers only. Please revise your username.'
  400ErrorResponseAddressV03:
    properties:
      status:
        type: number
        example: 400
      type:
        type: string
        example: "invalid-request"
      title:
        type: string
        example: "Invalid Request"
      detail:
        type: string
        example: Address validation error
      originalAddress:
        $ref: '#/definitions/AddressModelV03'
      error:
        type: object
        example:
          city: "city cannot be empty"
          zip: "zip cannot be empty"
  400ErrorResponseAddressAlternateV03:
    properties:
      status:
        type: number
        example: 400
      type:
        type: string
        example: "unrecognized-address"
      title:
        type: string
        example: "Unrecognized Address"
      detail:
        type: string
        example: Address validation error
      originalAddress:
        $ref: '#/definitions/AddressModelV03'
      error:
        type: object
        example:
          status: 502
          type: "service-objects-authorization-error"
          title: "SO Authorization Error"
          message: "SO Authorization Error: Please provide a valid license key for this web service."
          code: "1"
  400BarcodeErrorResponseV03:
    properties:
      status:
        type: number
        example: 400
      type:
        type: string
        example: not-eligible-card
      title:
        type: string
        example: "Not Eligible Card"
      message:
        type: string
        example: You have reached the limit of dependent cards you can receive via online application.
      detail:
        type: string
        example: You have reached the limit of dependent cards you can receive via online application.
  500ErrorResponseCreatePatronV03:
    properties:
      status:
        type: string
        example: 502
      type:
        type: string
        example: ils-integration-error
      message:
        type: string
        example: The ILS could not be requested when attempting to create a patron.
      detail:
        type: object
        example:
          error: {}
  502PatronNotFoundErrorV03:
    properties:
      status:
        type: string
        example: 502
      type:
        type: string
        example: patron-not-found
      title:
        type: string
        example: "Patron Not Found"
      message:
        type: string
        example: The patron couldn't be found in the ILS with the barcode or username.
      detail:
        type: string
        example: The patron couldn't be found in the ILS with the barcode or username.
  502ILSIntegrationErrorV03:
    properties:
      status:
        type: string
        example: 502
      type:
        type: string
        example: ils-integration-error
      title:
        type: string
        example: "ILS Integration Error"
      message:
        type: string
        example: The ILS could not be requested.
      detail:
        type: string
        example: The ILS could not be requested.
  502ILSIntegrationUsernameErrorV03:
    properties:
      status:
        type: string
        example: 502
      type:
        type: string
        example: ils-integration-error
      title:
        type: string
        example: "ILS Integration Error"
      message:
        type: string
        example: The ILS could not be requested when validating the username.
      detail:
        type: string
        example: The ILS could not be requested when validating the username.
tags:
  - name: patrons
    description: Patron API
  - name: validations
    description: Validations API
securityDefinitions:
  api_auth:
    type: oauth2
    flow: accessCode
    authorizationUrl: 'https://isso.nypl.org/oauth/authorize'
    tokenUrl: 'https://isso.nypl.org/oauth/token'
    scopes:
      'openid write:patron offline_access api': Creating Patron and Validations access
